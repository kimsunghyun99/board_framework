/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-11-08 05:47:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1699421000727L));
    _jspx_dependants.put("jar:file:/C:/springboot_board/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>로그인</title>\n");
      out.write("<style>\n");
      out.write("\n");
      out.write("        body { font-family: \"나눔고딕\", \"맑은고딕\";}\n");
      out.write("        h1 { font-family: \"HY견고딕\"; color: rgb(81, 144, 160);}\n");
      out.write("        a:link { color : black} \n");
      out.write("        a:visited { color : black}\n");
      out.write("        a:hover { color: red }\n");
      out.write("        a {text-decoration: none; cursor:hand;}\n");
      out.write("        .main {\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .topBanner {\n");
      out.write("            margin-top : 10px;\n");
      out.write("            margin-bottom : 10px;\n");
      out.write("            max-width: 500px;\n");
      out.write("            height: auto;\n");
      out.write("            display : block;\n");
      out.write("            margin: auto;\n");
      out.write("\n");
      out.write("        }\n");
      out.write("        .login {\n");
      out.write("        \n");
      out.write("        width:50%;\n");
      out.write("        height: auto;\n");
      out.write("        padding: 20px, 20px;\n");
      out.write("        background-color:#FFFFFF;\n");
      out.write("        text-align: center;\n");
      out.write("        border: 5px solid gray;\n");
      out.write("        border-radius: 30px;\n");
      out.write("        margin:auto;\n");
      out.write("        \n");
      out.write("        }\n");
      out.write("        .userid, .password {\n");
      out.write("        \n");
      out.write("        width:80%;\n");
      out.write("        height: 25px;\n");
      out.write("        border: none;\n");
      out.write("        border-bottom: 2px solid #adadad;\n");
      out.write("        outline: none;\n");
      out.write("        color: #636e72;\n");
      out.write("        font-size: 16px;\n");
      out.write("         background: none;\n");
      out.write("         margin-top: 20px;\n");
      out.write("   \n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .bottomText {\n");
      out.write("        text-align: center;\n");
      out.write("        font-size: 20px;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .btn_login {\n");
      out.write("            position:relative;\n");
      out.write("            left: 40%;\n");
      out.write("            transform: translateX(-50%);\n");
      out.write("            margin-bottom: 40px;\n");
      out.write("            width: 80%;\n");
      out.write("            height: 40px;\n");
      out.write("             background: linear-gradient(125deg,#81ecec,#6c5ce7,#81ecec);\n");
      out.write("             background-position:left;\n");
      out.write("             background-size:200%\n");
      out.write("             color:white;\n");
      out.write("             font-weight:bold;\n");
      out.write("             border:none;\n");
      out.write("             cursor:pointer;\n");
      out.write("             transition: 0.4s;\n");
      out.write("             display:inline;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("</style>\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js\"></script>\n");
      out.write("<script>\n");
      out.write("   window.onload = async () => {\n");
      out.write("      //쿠키 가져오기\n");
      out.write("      const getCookie = (name) => {\n");
      out.write("          \n");
      out.write("    	   const cookies = document.cookie.split(`; `).map((el)=>el.split('='));\n");
      out.write("    	   let getItem = [];\n");
      out.write("    	   \n");
      out.write("    	for(let i=0; i<cookies.length; i++){\n");
      out.write("    		if(cookies[i][0] === name) {\n");
      out.write("    			getItem.push(cookies[i][1]);\n");
      out.write("    			break;\n");
      out.write("    		}\n");
      out.write("    	}   \n");
      out.write("    	   \n");
      out.write("      \n");
      out.write("      \n");
      out.write("      if(getItem.length > 0) {\n");
      out.write("    	  return decodeURIComponent(getItem[0]);\n");
      out.write("      }\n");
      out.write("     \n");
      out.write("      }\n");
      out.write("   \n");
      out.write("   let userid = getCookie('userid');\n");
      out.write("   let password = getCookie('password');\n");
      out.write("   let authkey = getCookie('authkey');\n");
      out.write("   \n");
      out.write("   //userid 쿠키가 존재하면\n");
      out.write("   if(userid !== undefined){\n");
      out.write("	document.querySelector('#rememberUserid').checked = true;\n");
      out.write("	document.querySelector('#userid').value = userid;\n");
      out.write("   } else {\n");
      out.write("	   document.querySelector('#rememberUserid').checked = false;\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   // 패스워드 쿠키가 존재하면\n");
      out.write("   if(password !== undefined){\n");
      out.write("	document.querySelector('#rememberPassword').checked = true;\n");
      out.write("	// Base64로 인코딩 된 password 디코딩\n");
      out.write("	const decrypt = CryptoJS.enc.Base64.parse(password);\n");
      out.write("	const hashData = decrypt.toString(CryptoJS.enc.Utf8);\n");
      out.write("	password = hashData;\n");
      out.write("	\n");
      out.write("	document.querySelector('#password').value = password;\n");
      out.write("   } else {\n");
      out.write("	   document.querySelector('#rememberPassword').checked = false;\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   \n");
      out.write("   //자동 로그인 처리\n");
      out.write("   if(authkey !== undefined) {\n");
      out.write("	   let formData = new FormData();\n");
      out.write("	   formData.append(\"authkey\",authkey);\n");
      out.write("	   \n");
      out.write("	   await fetch('/member/login?autologin=PASS', {\n");
      out.write("		 method: 'POST',\n");
      out.write("		 body: formData\n");
      out.write("	   }).then((response)=>response.json())\n");
      out.write("	   .then((data) => {\n");
      out.write("		   if(data.message === 'GOOD') {\n");
      out.write("			  document.location.href='/board/list?page=1'; \n");
      out.write("		   } else {\n");
      out.write("			   alert('시스템 장애로 자동 로그인이 실패 했습니다.');\n");
      out.write("		   }\n");
      out.write("	   }).catch((error)=> {\n");
      out.write("		   console.log(\"error = \" + error);\n");
      out.write("	   })\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   \n");
      out.write("   }\n");
      out.write("\n");
      out.write("   const loginCheck = async () =>{\n");
      out.write("      \n");
      out.write("      const userid = document.querySelector('#userid');\n");
      out.write("      const password = document.querySelector('#password');\n");
      out.write("      const authkey = '12345';\n");
      out.write("      \n");
      out.write("      if(userid.value === ''){\n");
      out.write("         alert(\"아이디를 입력하세요\");\n");
      out.write("         userid.focus();\n");
      out.write("         return false;\n");
      out.write("      }\n");
      out.write("      if(password.value === ''){\n");
      out.write("         alert(\"비밀번호를 입력하세요\");\n");
      out.write("         userid.focus();\n");
      out.write("         return false;\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      //document.loginForm.action='/member/login';\n");
      out.write("      //document.loginForm.submit();\n");
      out.write("      let formData = new FormData();//id에 loginFrom을 넣고 FormData(id)를 하면 됨\n");
      out.write("      formData.append(\"userid\",userid.value);\n");
      out.write("      formData.append(\"password\",password.value); // form문이 필요없음 \n");
      out.write("      \n");
      out.write("      await fetch('/member/login?autologin=NEW',{\n");
      out.write("         method:\"POST\",\n");
      out.write("         body:formData\n");
      out.write("      }).then((response) => response.json())\n");
      out.write("      .then((data) => {\n");
      out.write("         if(data.message === 'GOOD'){\n");
      out.write("            cookieManage(userid.value,password.value,data.authkey);\n");
      out.write("            document.location.href='/board/list?page=1';   \n");
      out.write("         }\n");
      out.write("         else if(data.message === 'ID_NOT_FOUND'){\n");
      out.write("            msg.innerHTML=\"존재하지 않는 아이디 입니다.\";\n");
      out.write("         }\n");
      out.write("         else if(data.message === 'PASSWORD_NOT_FOUND'){\n");
      out.write("            msg.innerHTML=\"잘못된 비밀번호 입니다.\"\n");
      out.write("         }\n");
      out.write("         else{\n");
      out.write("            alert(\"시스템 장애로 로그인이 실패하였습니다.\");\n");
      out.write("         }   \n");
      out.write("      }).catch((error) => {\n");
      out.write("         console.log(\"error = \"+error);\n");
      out.write("      })\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   //이메일 체크관리\n");
      out.write("   const checkRememberUserid = () => {\n");
      out.write("      if(document.querySelector('#rememberUserid').checked){\n");
      out.write("         document.querySelector('#rememberMe').checked = false;\n");
      out.write("      }   \n");
      out.write("   }\n");
      out.write("   //패스워드 체크관리\n");
      out.write("   const checkRememberPassword = () => {\n");
      out.write("      if(document.querySelector('#rememberPassword').checked){\n");
      out.write("         document.querySelector('#rememberMe').checked = false;\n");
      out.write("      }   \n");
      out.write("   }\n");
      out.write("   //자동로그인\n");
      out.write("   const checkRememberMe = () => {\n");
      out.write("      if(document.querySelector('#rememberMe').checked){\n");
      out.write("         document.querySelector('#rememberUserid').checked = false;\n");
      out.write("         document.querySelector('#rememberPassword').checked = false;\n");
      out.write("      }   \n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   //쿠키관리\n");
      out.write("   const cookieManage = (userid,password,authkey) => {\n");
      out.write("      \n");
      out.write("      //userid가 체크되었을 경우\n");
      out.write("      if(rememberUserid.checked){\n");
      out.write("         document.cookie = 'userid='+userid+';path=/;expires=Sun, 31, Dec 2023 23:59:59 GMT';\n");
      out.write("      }\n");
      out.write("      else{\n");
      out.write("         document.cookie = 'userid='+userid+';path=/;max-age=0';\n");
      out.write("      }\n");
      out.write("      //password가 체크되었을 경우\n");
      out.write("      if(rememberPassword.checked){\n");
      out.write("         //Base64(양방향 복호화 알고리즘)로 패스워드 인코딩\n");
      out.write("         const key = CryptoJS.enc.Utf8.parse(password);\n");
      out.write("         const base64 = CryptoJS.enc.Base64.stringify(key);\n");
      out.write("         password = base64;\n");
      out.write("         document.cookie = 'password='+password+'; path=/; expries=Sun,30,Dec 2023 23:59:59 GMT';\n");
      out.write("      }\n");
      out.write("      else{\n");
      out.write("         document.cookie = 'password='+password+';path=/;max-age=0';\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      //자동저장이 체크되었을 경우\n");
      out.write("      if(rememberMe.checked){\n");
      out.write("         document.cookie = 'authkey='+authkey+'; path=/; expires=Sun, 31, Dec 2023 23:59:59 GMT';\n");
      out.write("      }\n");
      out.write("      else{\n");
      out.write("         document.cookie = 'authkey='+authkey+'; path=/; max-age=0';\n");
      out.write("      }\n");
      out.write("   }\n");
      out.write("   \n");
      out.write("   \n");
      out.write("   const press = () => {\n");
      out.write("       if(event.keyCode == 13) loginCheck(); // 13 = enter\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");

String userid = (String)session.getAttribute("userid");

//권한부여
if(userid != null){
   response.sendRedirect("/board/list?page=1");
}

      out.write("\n");
      out.write("\n");
      out.write("<div class=\"main\">\n");
      out.write("\n");
      out.write("<div class=\"topBanner\">\n");
      out.write("<img class=\"topBanner\" src=\"/resources/images/logo.jpg\" title=\"서울기술교육센터\">\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"login\">\n");
      out.write("<h1>로그인</h1>\n");
      out.write("<form name=\"loginForm\" method=\"post\">\n");
      out.write("   <input type=\"text\" name=\"userid\" class=\"userid\" id=\"userid\" placeholder=\"아이디를 입력하세요\">\n");
      out.write("   <input type=\"password\" name=\"password\" class=\"password\" id=\"password\" placeholder=\"패스워드를 입력하세요\" onkeydown=\"press()\">\n");
      out.write("   <p id=\"msg\" style=\"color:red; text-align:center\"></p>\n");
      out.write("   <br>\n");
      out.write("   <input type=\"checkbox\" id=\"rememberUserid\" onclick=\"checkRememberUserid()\"> 아이디기억\n");
      out.write("   <input type=\"checkbox\" id=\"rememberPassword\" onclick=\"checkRememberPassword()\"> 패스워드기억\n");
      out.write("   <input type=\"checkbox\" id=\"rememberMe\" onclick=\"checkRememberMe()\"> 자동 로그인\n");
      out.write("   <br><br>\n");
      out.write("   <input type=\"button\" id=\"btn_login\" class=\"btn_login\" value=\"로그인\" onclick=\"loginCheck()\">\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<div class=\"bottomText\">사용자가 아니면 ▶ <a href=\"/member/signup\">여기</a>를 눌러 등록을 해주세요.<br><br></div>\n");
      out.write("<div>[<a href=\"/member/searchID\">아이디 찾기</a> | <a href=\"/member/searchPassword\">패스워드 찾기</a>]<br><br></div>\n");
      out.write("\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
