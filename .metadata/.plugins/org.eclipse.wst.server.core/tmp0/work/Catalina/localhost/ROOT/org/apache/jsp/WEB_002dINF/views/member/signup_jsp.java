/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-11-08 05:48:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1699421000727L));
    _jspx_dependants.put("jar:file:/C:/springboot_board/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>회원 등록</title>\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/css/board.css\" type=\"text/css\">\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write(".imageZone {\n");
      out.write("	border: 2px solid #92AAB0;\n");
      out.write("	width: 60%;\n");
      out.write("	height: auto;\n");
      out.write("	color: #92AAB0\n");
      out.write("	text-align: center;\n");
      out.write("	vertical-align: middle;\n");
      out.write("	margin: auto;\n");
      out.write("	padding: 10px, 10px;\n");
      out.write("	font-size: 200%;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write(".addSearch {\n");
      out.write("\n");
      out.write("width: 80%;\n");
      out.write("border: none;\n");
      out.write("border-bottom: 2px solid #adadad;\n");
      out.write("margin: 5px;\n");
      out.write("padding: 10px 10px;\n");
      out.write("outline: none;\n");
      out.write("color: #636e72;\n");
      out.write("font-size: 16px;\n");
      out.write("height: 25px;\n");
      out.write("background: none;\n");
      out.write("\n");
      out.write("\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\n");
      out.write("window.onload = () => {\n");
      out.write("	\n");
      out.write("	var imgCheck = \"N\";\n");
      out.write("	var imgZone = document.querySelector('#imageZone');\n");
      out.write("	var fileEvent = document.querySelector('#imageFile');\n");
      out.write("	\n");
      out.write("	// imageZone 영역 클릭 시 파일이벤트 처리, 자바스크립트에선 이벤트 발생 시 이벤트 정보를 담고 있는 event(e) 라는 객체를 자동 생성\n");
      out.write("	imgZone.addEventListener('click', (e)=> {\n");
      out.write("		fileEvent.click(e); // 사용자가 만든 UI를 통해 <input type=\"file\"> 을 클릭하는 것과 같은 효과를 내게 됨 \n");
      out.write("		\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	fileEvent.addEventListener('change', (e) => {\n");
      out.write("		const files = e.target.files; // 선택한 파일 정보가 e.target.files(배열)에 저장\n");
      out.write("		showImage(files);\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	const showImage = (files) => {\n");
      out.write("		imgZone.innerHTML = '';\n");
      out.write("		const imgFile = files[0];\n");
      out.write("		\n");
      out.write("		if(imgFile.type.indexOf(\"image\") < 0) { \n");
      out.write("			\n");
      out.write("			alert(\"이미지 파일만 올려주세요.\");\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		const reader = new FileReader(); // new 연산자를 통해서 FileReader 객체를 reader가 참조(상속)\n");
      out.write("		reader.onload = function(event) { // reader.readAsDataURL(imgFile)로 이미지를 읽고 나서 해야 할 일\n");
      out.write("			imgZone.innerHTML = \"<img src=\" + event.target.result + \" id='uploadImg' style='width:350px;height:auto'>\";\n");
      out.write("		};\n");
      out.write("		reader.readAsDataURL(imgFile); // 실제로 이미지 파일을 읽는 부분\n");
      out.write("		imgCheck = \"Y\";\n");
      out.write("		\n");
      out.write("		}\n");
      out.write("	\n");
      out.write("	btnRegister.addEventListener('click',async()=> {\n");
      out.write("		\n");
      out.write("		// 유효성 검사\n");
      out.write("		if(imgCheck == 'N') {\n");
      out.write("			alert(\"프로필 이미지를 등록하세요\");\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		if(userid.value =='' || userid.value == undefined || userid.value == null) {\n");
      out.write("		alert(\"아이디를 입력하세요\");\n");
      out.write("		userid.focus();\n");
      out.write("		return false;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		if(username.value=='') {\n");
      out.write("			alert(\"이름을 입력하세요.\");\n");
      out.write("			username.focus();\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		\n");
      out.write("		const Pass = password.value;\n");
      out.write("		const Pass1 = password1.value;\n");
      out.write("		if(Pass == '') {\n");
      out.write("			alert(\"암호를 입력하세요\");\n");
      out.write("			password.focus();\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		if(Pass1 == '') {\n");
      out.write("			\n");
      out.write("			alert(\"암호를 입력하세요\");\n");
      out.write("			password1.focus();\n");
      out.write("			return false;\n");
      out.write("			\n");
      out.write("		}\n");
      out.write("		if(Pass != Pass1) {\n");
      out.write("			alert(\"입력된 암호를 확인하세요.\");\n");
      out.write("			password1.focus();\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("			// 자바스크립트의 정규식을 이용해서 암호 규칙을 확인\n");
      out.write("			// 암호 규칙 --> 8~20자리 내에 영문, 숫자 , 특수문자를 조합\n");
      out.write("			\n");
      out.write("			let num = Pass.search(/[0-9]/g); // 0~9까지의 숫자가 들어 있는지 검색. 검색해서 값이 없으면 -1을 리턴\n");
      out.write("			let eng = Pass.search(/[a-z]/ig); // i: 알파벳 대소문자 구분없이 검색\n");
      out.write("			let spe = Pass.search(/[`~!@#$%^&*|\\\\\\'\\\";:\\/?]/ig); // 특수문자가 포함되어 있는지 검색\n");
      out.write("			if(Pass.length<8 || Pass.length > 20) {\n");
      out.write("				alert(\"암호는 8자리 ~ 20자 이내로 입력해 주세요.\");\n");
      out.write("				return false;\n");
      out.write("			} else if(Pass.search(/\\s/) != -1) {\n");
      out.write("				alert(\"암호는 공백 없이 입력해 주세요\");\n");
      out.write("				return false;\n");
      out.write("			}  else if(num<0 || eng <0 || spe <0) {\n");
      out.write("				alert(\"암호는 영문,숫자,특수문자를 혼합하여 입력해 주세요.\");\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("		\n");
      out.write("			\n");
      out.write("			 const gender = document.querySelectorAll('input[name=gender]:checked');\n");
      out.write("			//const gender = document.getElementsByName('gender');\n");
      out.write("			let genderValue = '';\n");
      out.write("			for(let i=0; i<gender.length; i++) {\n");
      out.write("				if(gender[i].checked === true) \n");
      out.write("					genderValue = gender[i].value;\n");
      out.write("			}\n");
      out.write("			const hobby = document.querySelectorAll('input[name=hobby]:checked'); // 유사 배열\n");
      out.write("			let hobbyArray = []; // ES6+ 문법\n");
      out.write("			for(let i=0; i<hobby.length; i++) {\n");
      out.write("				hobbyArray.push(hobby[i].value);	\n");
      out.write("			}\n");
      out.write("			const job = document.querySelector('select[name=job] option:checked');\n");
      out.write("			\n");
      out.write("			if(genderValue == '') {\n");
      out.write("				alert(\"성별을 선택하세요\");\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("			if(hobbyArray.length ==0) {\n");
      out.write("				alert(\"취미를 선택하세요\");\n");
      out.write("				return false;\n");
      out.write("			}			\n");
      out.write("			if(job.value == 'all') {\n");
      out.write("				alert(\"직업을 선택하세요\");\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("			if(zipcode.value =='') {\n");
      out.write("				alert(\"우편번호를 입력하세요\");\n");
      out.write("				zipcode.focus();\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("			if(addr2.value =='') {\n");
      out.write("				alert(\"상세 주소를 입력하세요\");\n");
      out.write("				addr2.focus();\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			address.value = addr1.value + \" \" + addr2.value;\n");
      out.write("			\n");
      out.write("			if(telno.value == '') {\n");
      out.write("				alert(\"전화번호를 입력하세요\");\n");
      out.write("				telno.focus();\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("			const beforeTelno = telno.value; \n");
      out.write("			const afterTelno = beforeTelno.replace(/\\-/ig,\"\").replace(/\\ /ig,\"\").trim();\n");
      out.write("			telno.value = afterTelno;\n");
      out.write("			\n");
      out.write("			if(email.value == '') {\n");
      out.write("				alert(\"이메일 주소를 입력하세요\");\n");
      out.write("				email.focus();\n");
      out.write("				return false;\n");
      out.write("			}	\n");
      out.write("			// 숙제 이메일 유효성 검사 로직 만들기\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			if(description.value =='') {\n");
      out.write("				alert(\"자기소개를 입력하세요\");\n");
      out.write("				description.focus();\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			// 비동기처리\n");
      out.write("			const formData = new FormData(RegistryForm);\n");
      out.write("		\n");
      out.write("			await fetch('/member/signup', {     \n");
      out.write("\n");
      out.write("				method:'POST',\n");
      out.write("				body: formData\n");
      out.write("			}).then((response)=>response.json())\n");
      out.write("			   .then((data)=> {\n");
      out.write("				      if(data.message === \"GOOD\") {\n");
      out.write("				    	  alert(decodeURIComponent(data.username) + '님 회원 가입을 축하 드립니다.');\n");
      out.write("				    	  document.location.href='/board/list?page=1';\n");
      out.write("				      } \n");
      out.write("				      else {\n");
      out.write("				    	  alert(\"서버 장애로 회원 가입에 실패했습니다.\");\n");
      out.write("				      }\n");
      out.write("				  }).catch((error)=> {\n");
      out.write("					  console.log(\"error = \" + error);\n");
      out.write("				  });\n");
      out.write("					   \n");
      out.write("			\n");
      out.write("			\n");
      out.write("	\n");
      out.write("			//document.RegistryForm.action ='/member/signup';\n");
      out.write("			//document.RegistryForm.submit();\n");
      out.write("			\n");
      out.write("\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	const selectAll = (checkElement) => {\n");
      out.write("		\n");
      out.write("		const checkboxes = document.getElementsByName('hobby');\n");
      out.write("		checkboxes.forEach((checkbox) => {\n");
      out.write("			checkbox.checked = checkElement.checked;\n");
      out.write("		});	\n");
      out.write("		\n");
      out.write("		\n");
      out.write("		\n");
      out.write("		/*\n");
      out.write("		if(document.getElementById('all').checked == true)\n");
      out.write("			for(var i=0; i<document.getElementsByName('hobby').length; i++)\n");
      out.write("				document.getElementsByName('hobby')[i].checked = true;\n");
      out.write("		\n");
      out.write("		if(document.getElementById('all').checked == false)\n");
      out.write("			for(var i=0; i<document.getElementsByName('hobby').length; i++)\n");
      out.write("		document.getElementsByName('hobby')[i].checked = false;\n");
      out.write("		*/\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	const searchAddr = ()=> {\n");
      out.write("		\n");
      out.write("		if(addrSearch.value == '') {\n");
      out.write("	alert(\"검색할 주소를 입력하세요\");\n");
      out.write("	addrSearch.focus();\n");
      out.write("	return false;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		window.open ( \n");
      out.write("				\"/member/addrSearch?page=1&addrSearch=\" + addrSearch.value,\n");
      out.write("				\"주소검색\",\n");
      out.write("				\"width=900, height=540, top=50, left=50\"\n");
      out.write("	);\n");
      out.write("		\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	const idCheck = async () => {  // function async idCheck()\n");
      out.write("		\n");
      out.write("		const userid = document.querySelector('#userid');\n");
      out.write("		\n");
      out.write("		await fetch('/member/idCheck', {     \n");
      out.write("			\n");
      out.write("			method:\"POST\",\n");
      out.write("			body: userid.value\n");
      out.write("		}).then((response)=>response.text())\n");
      out.write("		   .then((data)=> {\n");
      out.write("			  const idCheckNotice = document.querySelector('#idCheckNotice');\n");
      out.write("			  if(data == 0) {\n");
      out.write("				  idCheckNotice.innerHTML = \"사용 가능한 아이디입니다.\"\n");
      out.write("			  }\n");
      out.write("				  else {\n");
      out.write("					  idCheckNotice.innerHTML = \"이미 사용중인 아이디입니다.\"\n");
      out.write("					  \n");
      out.write("					  userid.focus();\n");
      out.write("					 \n");
      out.write("				  }\n");
      out.write("			  \n");
      out.write("		   });\n");
      out.write("		\n");
      out.write("		\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"main\">\n");
      out.write("\n");
      out.write("<h1>회원 등록</h1><br>\n");
      out.write("\n");
      out.write("<div class=\"WriteForm\">\n");
      out.write("\n");
      out.write("	<form id=\"RegistryForm\" name=\"RegistryForm\" method=\"POST\" enctype=\"multipart/form-data\">\n");
      out.write("	<br><br>\n");
      out.write("	<input type=\"file\" name=\"fileUpload\" id=\"imageFile\" style=\"display:none\">\n");
      out.write("	<div class=\"imageZone\" id=\"imageZone\">클릭 후 탐색창에서 사진을<br>선택해 주세요.</div>\n");
      out.write("	<input type=\"text\" class=\"input_field\" id=\"userid\" name=\"userid\" placeholder=\"여기에 아이디를 입력해 주세요\" onchange=\"idCheck()\">\n");
      out.write("	\n");
      out.write("	<br><span id=\"idCheckNotice\"></span>\n");
      out.write("	<input type=\"text\" class=\"input_field\" id=\"username\" name=\"username\" placeholder=\"여기에 이름을 입력해 주세요\">\n");
      out.write("	<input type=\"password\" class=\"input_field\" id=\"password\" name=\"password\" placeholder=\"여기에 패스워드를 입력해 주세요\">\n");
      out.write("	<input type=\"password\" class=\"input_field\" id=\"password1\" name=\"password1\" placeholder=\"여기에 패스워드를 한번 더 입력해 주세요\">\n");
      out.write("	\n");
      out.write("	<div style=\"width:90%; text-align:left; position:relative; left:35px; border-bottom:2px solid #adadad; margin:10px; padding: 10px;\">\n");
      out.write("	성별 :\n");
      out.write("	<label><input type=\"radio\" name=\"gender\" value=\"남성\">남성</label>\n");
      out.write("	<label><input type=\"radio\" name=\"gender\" value=\"여성\">여성</label><br><br>\n");
      out.write("	취미 :\n");
      out.write("	<label><input type=\"checkbox\" id=\"all\" name=\"all\" onclick=\"selectAll(this)\">전체선택</label>\n");
      out.write("	<label><input type=\"checkbox\" name=\"hobby\" value=\"음악감상\">음악감상</label>\n");
      out.write("	<label><input type=\"checkbox\" name=\"hobby\" value=\"영화보기\">영화보기</label>\n");
      out.write("	<label><input type=\"checkbox\" name=\"hobby\" value=\"스포츠\">스포츠</label><br>\n");
      out.write("	직업 :\n");
      out.write("	<select name=\"job\">\n");
      out.write("		<option value=\"all\" disabled selected>--아래 내용 중에서 선택 --</option>\n");
      out.write("		\n");
      out.write("		<option value=\"회사원\">회사원</option>\n");
      out.write("		<option value=\"공무원\">공무원</option>\n");
      out.write("		<option value=\"자영업\">자영업</option>\n");
      out.write("	</select>\n");
      out.write("	<br>\n");
      out.write("	</div>\n");
      out.write("	<input type=\"text\" id=\"addrSearch\" name=\"addrSearch\" class=\"addrSearch\" placeholder=\"주소를 검색합니다.\">\n");
      out.write("	<input type=\"button\" id=\"btn_addSearch\" class=\"btn_addSearch\" value=\"주소검색\" onclick=\"searchAddr()\">\n");
      out.write("	<input type=\"text\" id=\"zipcode\" name=\"zipcode\" class=\"input_field\" placeholder=\"우편변호가 검색되어 입력됩니다.\" readonly>\n");
      out.write("	<input type=\"text\" id=\"addr1\" name=\"addr1\" class=\"input_field\" placeholder=\"주소가 검색되어 입력됩니다.\" readonly>\n");
      out.write("	<input type=\"text\" id=\"addr2\" name=\"addr2\" class=\"input_field\" placeholder=\"상세 주소를 입력하세요.\" >\n");
      out.write("	<input type=\"hidden\" id=\"address\" name=\"address\">\n");
      out.write("	<input type=\"text\" id=\"telno\" name=\"telno\" class=\"input_field\" placeholder=\"전화번호를 입력하세요.\">\n");
      out.write("	<input type=\"text\" id=\"email\" name=\"email\" class=\"input_field\" placeholder=\"이메일주소를 입력하세요.\">\n");
      out.write("	<p style=\"color:red\">일반 사용자 권한으로 등록됩니다.</p><br>\n");
      out.write("	<textarea class=\"input_content\" id=\"description\" cols=\"100\" rows=\"500\" name=\"description\" placeholder=\"자기 소개를 입력해 주세요\"></textarea><br>\n");
      out.write("	<input type=\"button\" id=\"btnRegister\" class=\"btn_write\" value=\"여기를 클릭하세요.\">\n");
      out.write("	\n");
      out.write("	</form>\n");
      out.write("	\n");
      out.write("	</div>\n");
      out.write("	<br><br>\n");
      out.write("	\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
