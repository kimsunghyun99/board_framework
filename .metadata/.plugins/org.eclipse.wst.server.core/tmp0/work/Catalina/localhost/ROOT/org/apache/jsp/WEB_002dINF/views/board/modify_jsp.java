/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-11-08 07:13:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class modify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1699421000727L));
    _jspx_dependants.put("jar:file:/C:/springboot_board/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset = \"UTF-8\">\n");
      out.write("    <title>게시물 등록</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"/resources/css/board.css\" type=\"text/css\">\n");
      out.write(" \n");
      out.write("\n");
      out.write("<style>\n");
      out.write(" .fileuploadForm {\n");
      out.write("        margin: 5px;\n");
      out.write("        padding: 5px 5px 2px 30px;\n");
      out.write("        text-align: left;\n");
      out.write("        width: 90%;\n");
      out.write("        \n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .fileZone {\n");
      out.write("        border: solid #adadad;\n");
      out.write("        background-color: #a0a0a0;\n");
      out.write("        width: 97%;\n");
      out.write("        height:80px;\n");
      out.write("        color: white;\n");
      out.write("        text-align: center;\n");
      out.write("        vertical-align: middle;\n");
      out.write("        padding: 5px;\n");
      out.write("        font-size: 120%;\n");
      out.write("        \n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .fileUploadList {\n");
      out.write("        border: solid #adadad;\n");
      out.write("        width: 97%;\n");
      out.write("        height: auto;\n");
      out.write("        padding: 5px;\n");
      out.write("        font-size: 120%;\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        .filename {\n");
      out.write("        \n");
      out.write("        display:inline-block;\n");
      out.write("        vertical-align:top;\n");
      out.write("        width: 50%\n");
      out.write("        \n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .filesize {\n");
      out.write("        display:inline-block;\n");
      out.write("        vertical-align:top;\n");
      out.write("        color: #30693D;\n");
      out.write("        margin-left:10px;\n");
      out.write("        margin-right:5px;\n");
      out.write("       \n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .btn_del {\n");
      out.write("        display:inline-block;\n");
      out.write("        width: 15%;\n");
      out.write("        cursor: pointer;\n");
      out.write("        vertical-align: top;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .statusbar {\n");
      out.write("        border-bottom: solid 1px #92AAB0;\n");
      out.write("        min-height: 25px;\n");
      out.write("        width: 96%;\n");
      out.write("        padding: 10px 10px 10px 10px;\n");
      out.write("        vertical-align: top;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        .statusbar:nth-child(odd) {\n");
      out.write("        	background: #EBEFF0;\n");
      out.write("        }\n");
      out.write("</style>\n");
      out.write("\n");
      out.write(" <script>\n");
      out.write(" \n");
      out.write(" window.onload = () => {\n");
      out.write(" 	const fileZone = document.querySelector('#fileZone');\n");
      out.write(" 	const inputFile = document.querySelector('#inputFile');\n");
      out.write(" 	\n");
      out.write(" 	// fileZone 을 클릭하면 발생하는 이벤트 처리\n");
      out.write(" 	fileZone.addEventListener('click', (e) => {\n");
      out.write(" 		\n");
      out.write(" 		inputFile.click(e)\n");
      out.write(" 	});\n");
      out.write(" 	\n");
      out.write(" //파일탐색창을 열어 선택한 파일 정보를 files에 할당\n");
      out.write(" inputFile.addEventListener('change', (e) => {\n");
      out.write(" 	const files = e.target.files;\n");
      out.write(" 	fileCheck(files);\n");
      out.write(" });\n");
      out.write(" \n");
      out.write(" /* 마우스 이벤트 종류\n");
      out.write(" dragstart: 사용자가 객체를 드래그 할려고 시작할때 발생함.\n");
      out.write(" drag : 대상 객체를 드래그 하면서 마우스를 움직일때 발생함.\n");
      out.write(" dragenter(*) : 마우스가 대상 객체의 위로 진입할때 발생함\n");
      out.write("  dragover(*) : 드래그 하면서 마우스가 대상 객체의 영역 위에 자리 잡고 있을때 발생\n");
      out.write(" drop(*) : 드래그가 끝나서 드래그 하던 객체를 장소에 놓았을 때 발생\n");
      out.write(" dragleave : 드래그가 끝나서 마우스가 대상 객체의 위에서 벗어날때 발생함\n");
      out.write(" dragend:  대상객체를 드래그하다가 마우스 버튼을 놓는 순간 발생함\n");
      out.write(" */\n");
      out.write(" 	\n");
      out.write(" \n");
      out.write(" //fileZone으로 dragenter 이벤트 발생 시 처리하는 이벤트 핸들러\n");
      out.write(" fileZone.addEventListener('dragenter',(e)=> {\n");
      out.write(" 	e.stopPropagation(); // 상위 엘레멘트들로의 이벤트 전파를 중단\n");
      out.write(" 	e.preventDefault(); // 웹브라우저의 고유 동작을 중단\n");
      out.write(" 	fileZone.style.border = 'solid 2px #0B85A1';\n");
      out.write(" })\n");
      out.write(" \n");
      out.write(" //filzeZone으로 dragover 이벤트 발생시 처리하는 이벤트 핸들러\n");
      out.write(" fileZone.addEventListener('dragover',(e)=> {\n");
      out.write(" 	e.stopPropagation(); // 상위 엘레멘트들로의 이벤트 전파를 중단\n");
      out.write(" 	e.preventDefault(); // 웹브라우저의 고유 동작을 중단\n");
      out.write(" 	\n");
      out.write(" })\n");
      out.write(" //filzeZone으로 drop 이벤트 발생시 처리하는 이벤트 핸들러\n");
      out.write(" \n");
      out.write(" fileZone.addEventListener('drop',(e)=> {\n");
      out.write(" 	e.stopPropagation(); // 상위 엘레멘트들로의 이벤트 전파를 중단\n");
      out.write(" 	e.preventDefault(); // 웹브라우저의 고유 동작을 중단\n");
      out.write(" 	const files = e.dataTransfer.files;\n");
      out.write(" 	fileCheck(files);\n");
      out.write(" 	\n");
      out.write(" })\n");
      out.write(" }\n");
      out.write(" var uploadCountLimit = 5; //업로드 가능한 파일 개수\n");
      out.write("  var fileCount = 0; // 한 번 선택해서 가져오는 파일의 개수 \n");
      out.write("  var fileNum = 0; // 파일 고유 넘버\n");
      out.write("    var content_files = new Array();\n");
      out.write("  var rowCount = 0;\n");
      out.write("  \n");
      out.write("  const fileCheck =(files) => {\n");
      out.write(" 	 let filesArr = Object.values(files); // 객체에서 value에 해당되는 값을 뽑아서 배열로 반환 \n");
      out.write(" 	 \n");
      out.write(" 	 if(fileCount + filesArr.length > uploadCountLimit ) {\n");
      out.write(" 		 alert('파일은 최대 ' + uploadCountLimit + '개까지 업로드 할 수 있습니다.');\n");
      out.write(" 		 return;\n");
      out.write(" 	 }else {\n");
      out.write(" 		 fileCount += filesArr.length; \n");
      out.write(" 	 }\n");
      out.write(" 	 filesArr.forEach((file)=> {\n");
      out.write(" 		 \n");
      out.write(" 		 //FileReader 객체 : 웹애플리케이션 비동기적으로 웹브라우저에서 파일을 읽을때 사용하며,\n");
      out.write(" 		 // <input type= \"file\">태그를 이용하여 사용자가 선택한 파일들로부터 반환된 FileList 객체나\n");
      out.write(" 		 // Drag & Drop 이벤트로 반환된 DataTransfer 객체로부터 데이터를 얻음\n");
      out.write(" 		 var reader = new FileReader();\n");
      out.write(" 		 reader.readAsDataURL(file); // 파일 읽기\n");
      out.write(" 		 \n");
      out.write(" 		 // reader.readAsDataURL(file) 실행으로 파일 읽기가 성공적으로 수행되고 난 후\n");
      out.write(" 		 // read.onload 이벤트 핸들러를 통해 read.onload 이벤트 핸들러 내의 콜백 함수가 비동기적으로 실행됨\n");
      out.write(" 	     reader.onload = (e) => {\n");
      out.write(" 		 	content_files.push(file);\n");
      out.write(" 		 	if(file.size > 1073741824) {\n");
      out.write(" 		 		alert('파일 사이즈는 1GB를 초과할 수 없습니다.');\n");
      out.write(" 		 		return;\n");
      out.write(" 		 		}\n");
      out.write(" 		 	\n");
      out.write(" 		 	rowCount++;\n");
      out.write(" 		 	var row = \"odd\";\n");
      out.write(" 		 	if(rowCount %2 ==0) row=\"even\";\n");
      out.write(" 		 	\n");
      out.write(" 		 	\n");
      out.write(" 		 	// 동적으로 div HTML 요소 생성\n");
      out.write(" 		 	let statusbar = document.createElement('div'); \n");
      out.write(" 		 	statusbar.setAttribute('class','statusbar ' + row) // <div class='statusbar odd'><div>\n");
      out.write(" 		 	statusbar.setAttribute('id','file' + fileNum); // <div class='statusbar odd' id='file0'><div>\n");
      out.write(" 		 	\n");
      out.write(" 		 	// statusbar element내의 하위 element인 <div class='filename'>파일이름</div>를 생성\n");
      out.write(" 		 	let filename = \"<div class='filename'>\" + file.name + \"</div>\";\n");
      out.write(" 		 	\n");
      out.write(" 		   // statusbar element내의 하위 element인 <div class='filesize'>파일사이즈</div>를 생성\n");
      out.write(" 		 	let sizeStr = \"\";\n");
      out.write(" 		    let sizeKB = file.size/1024;\n");
      out.write(" 		    if(parseInt(sizeKB) > 1024) {\n");
      out.write(" 		    	var sizeMB = sizeKB/1024;\n");
      out.write(" 		       sizeStr = sizeMB.toFixed(2) + \"MB\";\n");
      out.write(" 		    } else {\n");
      out.write(" 		    	sizeStr = sizeKB.toFixed(2) + \"KB\";\n");
      out.write(" 		    }\n");
      out.write(" 		    let size = \"<div class='filesize'>\" + sizeStr + \"</div>\";\n");
      out.write(" 		    \n");
      out.write(" 		    // statusbar element 내의 하위 element인 삭제 버튼 생성\n");
      out.write(" 		    let btn_delete = \"<div class='btn_del'><input type='button' value='삭제' onclick=fileDelete('file\" + fileNum + \"')></div>\";\n");
      out.write(" 		 	\n");
      out.write(" 		    statusbar.innerHTML = filename + size + btn_delete;\n");
      out.write(" 		    \n");
      out.write(" 		    fileUploadList.appendChild(statusbar);\n");
      out.write(" 		    \n");
      out.write(" 		    fileNum++;\n");
      out.write(" 		    \n");
      out.write(" 		 	};\n");
      out.write(" 	 });\n");
      out.write(" 	 \n");
      out.write(" 	 inputFile.value = '';\n");
      out.write(" 	 \n");
      out.write(" 	 \n");
      out.write("  }\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  \n");
      out.write("  \n");
      out.write("  \n");
      out.write("  \n");
      out.write("\n");
      out.write("  const fileDelete = (fileNum) => {\n");
      out.write(" 	 var no = fileNum.replace(/[^0-9]/g,\"\")   // file0에서 숫자 0의 앞 부분을 지우고 남은 숫자 0을 반환\n");
      out.write(" 	 content_files[no].is_delete = true;\n");
      out.write(" 	 document.querySelector('#' + fileNum).remove();\n");
      out.write(" 	 fileCount --;\n");
      out.write(" 	 \n");
      out.write("  }\n");
      out.write(" \n");
      out.write(" \n");
      out.write(" \n");
      out.write(" \n");
      out.write("     const modifyForm = async () => {\n");
      out.write("     \n");
      out.write("         let title = document.querySelector('#title');\n");
      out.write("         let content = document.querySelector('#content');\n");
      out.write("\n");
      out.write("\n");
      out.write("         // 필수값 등록시 값 입력 여부 확인\n");
      out.write("      \n");
      out.write("         if(title.value === '') {\n");
      out.write("             alert('제목을 입력하세요');\n");
      out.write("             title.focus();\n");
      out.write("             return false;\n");
      out.write("         }\n");
      out.write("         if(content.value === '') {\n");
      out.write("             alert('내용을 입력하세요!!!');\n");
      out.write("             content.focus();\n");
      out.write("             return false;\n");
      out.write("\n");
      out.write("         }\n");
      out.write("         \n");
      out.write("       //  document.ModifyForm.action = '/board/modify';\n");
      out.write("       //  document.ModifyForm.submit();\n");
      out.write("\n");
      out.write("       \n");
      out.write("     let formData = new FormData(ModifyForm);\n");
      out.write("  let uploadURL = \"\";\n");
      out.write("    \n");
      out.write("  if(content_files.length !=0) {\n");
      out.write("  	// 첨부파일이 있는 경우\n");
      out.write("  	uploadURL = \"/board/fileUpload?kind=U\";	\n");
      out.write("  	for(let i = 0; i< content_files.length; i++) {\n");
      out.write("  		if(!content_files[i].is_delete) {\n");
      out.write("  			formData.append(\"sendToFileList\", content_files[i]);\n");
      out.write("  		}\n");
      out.write("  	}\n");
      out.write("  } else {\n");
      out.write("  	uploadURL = \"/board/modify\";\n");
      out.write("  }\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  await fetch(uploadURL, {\n");
      out.write("  	method: 'POST',\n");
      out.write("      body: formData\n");
      out.write("  }).then((response)=> response.json())\n");
      out.write("  .then((data)=> {\n");
      out.write("  	   if(data.message === 'GOOD') {\n");
      out.write("  		   alert(\"게시물이 수정되었습니다.\");\n");
      out.write("  		   document.location.href='/board/view?seqno=' + seqno.value + '&page= ' + page.value + '&keyword=' + keyword.value;\n");
      out.write("  	   }\n");
      out.write("  }).catch((error)=> {\n");
      out.write("  	alert(\"시스템 장애로 게시물 수정이 실패했습니다.\");\n");
      out.write("  console.log(\"error\" + error);	\n");
      out.write("  })\n");
      out.write("\n");
      out.write("     }\n");
      out.write(" </script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("   \n");
      out.write("\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      out.write(" <div class = \"main\">\n");
      out.write("    <img src=\"/resources/images/logo.jpg\" id=\"topBanner\"><br>\n");
      out.write("    <h1>게시물 수정</h1>\n");
      out.write("    <br>\n");
      out.write("    <div id = \"formZone\"> \n");
      out.write("        <form class = \"ModifyForm\" name = \"ModifyForm\" method=\"post\">\n");
      out.write("\n");
      out.write("            <input type = \"text\" class = \"input_field\" name = \"writer\" value = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${view.writer}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" disabled>\n");
      out.write("            <input type = \"text\" id =\"title\" class = \"input_field\" name = \"title\" value = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${view.title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("            <input type = \"hidden\" id=\"seqno\" name = \"seqno\" value = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${view.seqno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("            <input type = \"hidden\" id=\"page\" name = \"page\" value = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${page}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("            <input type = \"hidden\" id=\"keyword\" name = \"keyword\" value = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${keyword}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("            <input type = \"hidden\" name = \"writer\" value = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${username}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("              <input type = \"hidden\" name = \"userid\" value = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userid}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("            <br><br>\n");
      out.write("            <textarea id = \"content\"  cols=\"100\" rows = \"500\" class=\"input_content\" name=\"content\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${view.content}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</textarea>\n");
      out.write("            <div style=\"width:80%;margin:auto\">\n");
      out.write("        ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("             <div class=\"fileuploadForm\">\n");
      out.write("            <input type=\"file\" id=\"inputFile\" name=\"uploadFile\" style=\"display:none\" multiple>\n");
      out.write("            <div class=\"fileZone\" id=\"fileZone\">파일첨부를 하기 위해서는 클릭하거나 여기로 파일을 드래그 하세요.<br>\n");
      out.write("                   첨부 파일은 최대 5개까지 등록이 가능합니다 .\n");
      out.write("            </div>\n");
      out.write("              <div class=\"fileUploadList\" id=\"fileUploadList\">\n");
      out.write("              \n");
      out.write("              </div>\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("            <input type = \"button\" class = \"btn_write\" value=\"수정\" onclick = \"modifyForm()\">\n");
      out.write("            <input type = \"button\" class = \"btn_cancel\" value=\"취소\" onclick = \"history.back()\">\n");
      out.write("\n");
      out.write("        </form>\n");
      out.write("\n");
      out.write("    </div>\n");
      out.write("    <br><br>\n");
      out.write(" </div>   \n");
      out.write("\n");
      out.write("</body>\n");
      out.write("\n");


String userid = (String)session.getAttribute("userid");
String username = (String)session.getAttribute("username");
String role = (String)session.getAttribute("role");
if(userid ==null) response.sendRedirect("/");


      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/board/modify.jsp(307,8) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/board/modify.jsp(307,8) '${fileInfoView}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${fileInfoView}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/board/modify.jsp(307,8) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("file");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write(" \n");
            out.write("        \n");
            out.write("             <p style=\"text-align:left\">\n");
            out.write("               \n");
            out.write("                삭제 : <input type=\"checkbox\" name=\"deleteFileList\" value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${file.fileseqno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\n");
            out.write("                ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${file.org_filename}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("&nbsp;(");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${file.filesize}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(")\n");
            out.write("            \n");
            out.write("             </p>\n");
            out.write("        \n");
            out.write("        ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
